@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.BlockGridPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
    var rootPage = (OHome)Model.Root();

    if (rootPage.OContent != null && rootPage.OContent.Id == Model.Id)
    {
        Layout = null;
    }
    else
    {
        Layout = "Main.cshtml";
    }

    ViewBag.CurrentPage = Model;
    ViewBag.ParentPage = Model.Parent;
    const string ShowAuthorAndReadTimeOption = "Show author and read time";
    const string ShowSideMenuOption = "Show author and read time";
    const string ShowSocialsOption = "Show social in post";

    var isInBlogPage = Model.Parent is OBlog;

    var showLeftMenu = false;
    var blockGridPageParent = Model.Parent as BlockGridPage;

    if (blockGridPageParent != null)
    {
        showLeftMenu = blockGridPageParent.OShowLeftMenu && blockGridPageParent.Children.Any();
    }
    else
    {
        showLeftMenu = Model.OShowLeftMenu && Model.Children.Any();
    }

    var hideFullScreenTopContainer = false;
}

@if (showLeftMenu)
{
    var sidebarNode = Model.Parent is BlockGridPage ? Model.Parent : Model;
    const string FullScreenTopContainerAlias = "oBlockFullScreenTopContainer";
    var fullScreenContainer = Model.BlogGrid.FirstOrDefault(block => block.Content.ContentType.Alias == FullScreenTopContainerAlias);

    <main class="inner-page">
        @if (fullScreenContainer != null)
        {
            @await Html.PartialAsync("Partials/blockGrid/Components/OBlockFullScreenTopContainer", fullScreenContainer)
            ViewBag.HideFullScreenTopContainer = true;
            hideFullScreenTopContainer = true;
        }
        <section class="content fullscreen-content">
            <div class="container">
                <div class="content__inner">
                    @await Umbraco.RenderMacroAsync("MenuForAllBlogs",
                        new
                        {
                            oCurrentUrl = Model.Url(),
                            oParentPage = sidebarNode.Id,
                            oDisplayCreationDate = false
                        })
                    <div class="content-info">
                        @await Html.GetBlockGridHtmlAsync(Model.BlogGrid)
                    </div>
                </div>
            </div>
        </section>
    </main>
}
else if (isInBlogPage)
{
    var request = Context.Request;
    var scheme = request.Scheme;
    var host = request.Host;
    var path = request.Path;
    var queryString = request.QueryString;
    var currentUrl = $"{scheme}://{host}{path}{queryString}";

    var blogPage = (OBlog)Model.Parent;
    var configBlog = blogPage.ConfigBlog;
    var showSideMenu = configBlog.Any(option => option == ShowSideMenuOption);
    var showSocials = configBlog.Any(option => option == ShowSocialsOption);
    ViewBag.ShowAuthorAndReadTime = configBlog.Any(option => option == ShowAuthorAndReadTimeOption);
    var previewBlockContent = Model.BlogGrid.FirstOrDefault(b => b.Content.ContentType.Alias == OBlogPostPreviewBlock.ModelTypeAlias)?.Content;
    var blogPostPreviewBlock = previewBlockContent as OBlogPostPreviewBlock;

    <main class="inner-page">
        @await Html.PartialAsync("oskiPartials/OFullScreenTopContainer", blogPage)

        <section class="content blogpost-content">
            <div class="container">
                <div class="content__inner">
                    @if (showSideMenu)
                    {
                        @await Html.PartialAsync("oskiPartials/oCategoriesMenuForNews", blogPage)
                    }
                    <div class="content-info">
                        @await Html.GetBlockGridHtmlAsync(Model.BlogGrid)
                        @if (showSocials && blogPostPreviewBlock != null)
                        {
                            @if (blogPostPreviewBlock.OTags.Any())
                            {
                                <div class="blogpost-news-item-tags oski-mt-2">
                                    @foreach (var tag in blogPostPreviewBlock.OTags)
                                    {
                                        <a class="blogpost-tag" href="@(Model.Parent.Url() + $"?tag={tag}")">@tag</a>
                                    }
                                </div>
                            }
                            @if (blogPage.ShareLinks.Any())
                            {
                                <div class="blogpost-share-social-container">
                                    @foreach (SocialLink link in blogPage.ShareLinks)
                                    {
                                        var shareLink = link.OUrl.First().Name + currentUrl;

                                        <a href="@shareLink" class="blogpost-share-social-item" title="Share on @link.OSocialNetworkName">
                                            @Html.Raw(System.IO.File.ReadAllText("wwwroot" + link.OIcon.Url()))
                                            @link.OSocialNetworkName
                                        </a>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </section>
    </main>
}
else
{
    <section class="content">
        <div class="container">
            <div class="case-info">
                @await Html.GetBlockGridHtmlAsync(Model.BlogGrid)
            </div>
        </div>
    </section>
}

@if (hideFullScreenTopContainer)
{
    <script>
        const layoutItem = document.querySelector('.umb-block-grid__layout-item[data-content-element-type-alias="oBlockFullScreenTopContainer"]');

        if (layoutItem) {
            layoutItem.style.display = 'none';
        }
    </script>
}

@if (isInBlogPage)
{
    <script>
        const layoutItem = document.querySelector('.umb-block-grid__layout-item[data-content-element-type-alias="oBlogPostPreviewBlock"]');

        if (layoutItem) {
            layoutItem.style.display = 'none';
        }
    </script>
}
